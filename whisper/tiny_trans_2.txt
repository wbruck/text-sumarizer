Welcome to the Real Python Podcast.
This is episode 145.
Would you like to practice your Python skills while building a challenging word game?
Have you wanted to learn more about creating command line interfaces and how to make them colorful and interactive?
This week on the show, Christopher Trudeau is here, bringing another batch of Pycoters weekly, articles and projects.
We share a recent Real Python step-by-step project about creating a clone of Wortal.
In the project, you'll practice building a terminal application, validating user input, and refactoring code into functions.
Christopher shares an article that compares the two popular testing tools, Knox and Tox.
He discusses how each 
framework approaches test environment configuration and why the author leans toward using Knox's Python decorator-based format.
We share several other articles and projects from the Python community, including a news update, trying out code and ideas quickly with the Python repel, a pop-about requiring virtual environments by default.
A discussion about things learned in 20 years as a software engineer, a project for a spreadsheet GUI inside of Jupiter Lab notebooks, and adding sea-style four loops to Python.
This episode is brought to you by Anaconda.
With more than 30 million users, Anaconda is the world's most popular data science platform.
Making tomorrow's innovations possible.
All right, let's get started.
The Real Python podcast is a weekly conversation about using Python in the real world.
My name is Christopher Bailey, your host.
Each week we feature interviews with experts in the community and discussions about the topics, articles, and courses about at realpython.com.
After the podcast, join us and learn real-world Python skills with the community of experts, a realpython.com.
Hey, Christopher, welcome back.
Hello.
I'm excited to dive in this week.
Got some kind of fun things.
I'm intrigued about and thrilled 
to talk about and it's a real mix of stuff.
So we have some news to start.
Is that it?
Yeah, for sure.
First one is for you Django Programmers out there.
There's a security fix that has been issued, bringing us to 4.1.6 or .0.9 and 3.2.17.
The fix 
addresses a potential denial of service attack through the use of corrupted accept language headers.
So go patch stuff.
Yeah.
Second bit of news is the Python software foundation is hiring a security developer in residence.
This is a full-time position to help formalize the existing security practices and to contribute to the security of C.
Python and PIPI. So resumes are being accepted until March 3rd and there's an online forum where you can submit your CV. It does have a capture there.
So a AI need not apply, I guess.
Yeah.
Yeah.
It's chat, GPT is taking all the jobs.
Might as well do the security stuff.
Yeah.
I did interesting.
He's funding that one there.
Oh, who's that?
I didn't notice that.
It's called the OpenSSF Alpha Omega Project has made this work possible.
So the Open Software Security.
Alpha Omega.
That sounds like a bad villain from an 80s movie.
Yeah.
Yeah.
Alpha and Omega.
Yes.
Yeah.
The Open Software Security Foundation.
Excellent.
Yeah.
Great.
Cool.
And the final little thing here is it's Python maintenance release time.
So Python 311.2 310.10 and 312 alpha 5 are now available.
So get them while they're hot.
Yeah.
Well, moving fast.
Yep.
All right.
Well, my first, I guess in this case, the Stun article, but a step by step project is a real Python one by Garana Hiela frequent guests on the show.
I don't know if he's done many step by steps.
But this one's great.
I'm really excited about it.
And it has a very low barrier to entry as far as like what you need to know to get in and play with it.
And it's called build a wordle clone with Python and rich.
If you're not familiar with wordle, I don't know where you've been.
But it kind of it's a word game created by Josh Wardle launched in October 2021.
Got so popular online, everybody sharing screenshots of it everywhere.
It got bought by the New York Times.
So this is sort of a clone of it.
It's missing a couple of features.
But it is a great way for you to practice your Python skills and create a command line interface kind of game that's rather fun and kind of challenging and something that you could definitely share with other people.
I found this great and it looks pretty through using the rich library that will mgaugun has created.
And I had not played with rich very much up to now.
And wow, it really does make a difference.
It really showcases the kinds of things that you can kind of create this nice console and colorizing that output and so forth.
It really can make 
quite the difference to making something look a little refreshed and kind of fun.
You start out this whole project building a prototype just the idea of how can you guess a secret word and giving you feedback of what letters were correct or maybe they were in the word but not in the right position or they weren't part of the word at all.
And so you kind of build that sort of initial functionality and practice that.
And then one of the key things you need to do is have a list of words for the game to randomly choose from and you build this kind of cool parsing mechanism that can grab any text that you want and separated into a word list for you.
And so he gives some examples that you can go on to Google.
Was that Google project Gutenberg?
I didn't read the article but is that what you're trying to say?
Exactly.
Yeah, it's totally project Gutenberg.
You can grab like Alson Wonderland or something like that.
That's a public domain book and have it go through and you can grab from 
that text file or you could use the if you want more interesting words you could grab say the works of Shakespeare or what have you.
It's not picky.
It just needs to be a text file and then we'll go through in person fund.
Words in there, that's a 
neat little command line program that runs and then you learn a little bit about using all these different kind of functionalities as you go.
As you're working in it, you get to practice with PathLab to do that reading of text and pulling in that file and you learn a little bit about text encoding.
Probably the biggest shift in the article and step by step process is that he wants you to build this prototype and then take it to the next step of actually building it as functions and creating 
what's called like a main loop that you may have seen in a lot of other programs.
So you kind of learn some of these best practices of doing that and then creating the independent functions.
So it's a little more maintainable.
Also allows it to be 
testable and you get to practice that with Doc Test inside of here also.
It's just really thoroughly thought out and takes you step by step.
It's playable game kind of all the way through and then at step four you're already kind of getting a chance to play around with rich, getting the console printing functionality and its language that uses for sort of stylizing things.
And then he added a set of things to kind of work on validating to make sure that these sort of edge cases you might run into like what happens if it tries to read the file but it fails somehow and the wordless is empty, how should it gracefully fail out of that?
What types of words should it accept if it has any kind of weird punctuation or something like that, how to kind of clean that stuff out?
So you get to practice all those kinds of techniques.
The one thing that you don't get a chance to do and this kind of left is one of those like here's the next step that you could do is as someone's typing you know you can verify that it's at least in the case of the standard wordle clone that it's a five letter word that they've typed.
You can verify if they've tried to type the same word again if it's too short or too long but in the case of like confirming us an actual dictionary word is something that he kind of leaves for you to figure out on your own and I think you've learned enough through going through this whole thing that you could probably figure it out inside of there and I'm sure there's other solutions that you can kind of check into but it's a nice set of next steps for you.
The idea you could also turn into like a topical thing and I did that you could kind of point that at these different files so you could kind of like gear 
the words that depending on you know the purposes of what you're sharing you could also create other kinds of video game types of things like a splash screen or intro screen or what have you as additional ideas for next steps.
I just really dug this thing it was a lot of fun again there's not a big barrier entry you don't need to be per se an intermediate developer because you get to practice all these things as you go very smoothly you get to work with a command line work with user input organizing the code testing all these kinds of nice functions and so really enjoyed it I was very excited to say this has been five months or more in the process of creation and gear around it's been working on lots of other different things and so I'm excited to see it come out.
I'm pretty sure I read that Sherlock Holmes is finally hit open domain this year so I'm sorry I said a nice little source file you can go and get your wats and on get some other fun words in there if you're interested yeah what's your first one this is an opinion piece by a gentleman named Heinrich Schleuann entitled why I like Knox the article is a comparison piece between talks and knocks and why Heinrich prefers the latter case both talks and knocks sound like nonsense words to you they're testing tools talks has been around for a while and it's main purpose is multi environment testing I use it with open source libraries I typically write and test my code in the most recent version of Python then use talks to do backward compatibility testing against all the versions of Python so talks automatically creates and populates virtual environments for you for each setup you've defined in a config file and then runs your tests suite in each one of those environments so that's talks knocks is essentially an alternative it handles the same kinds of problems and it's main claim to fame is how you configure it instead of using a text based config file you write actual Python scripts hey yeah Heinrich's article starts out by praising talks he explains that it's a great tool and he's glad that it's out there he doesn't really want to say anything negative about it but prefers how knocks handles certain things but since the article is a comparing contrast format it inevitably sort of had to tell you talks and you know he he he was very conscious of not coming across as as a negative kind of space the the big chunk of the article really is the difference between how you configure the two tools talks uses an i and i or any file format for you young and so there that's a old school kind of a tumble sort of thing the talks config has sections and key value pairs and for example you set a value named endless to specify which Python environments you want to use and talks sees that and sets things up by contrast as I mentioned knocks is approaches to write code instead of using a config file you write knocks file dot pie inside you import knocks and use decorators to specify what environments run on which tests this doesn't actually get embedded in your test suite it actually wraps that so a typical knocks function has two session dot install as to what packages to install from what place and usually you're using like a pie project short form in that like your test suite and then session dot run where you give it the command that actually does the running so that's called Python's unit test or Python's or nose or whatever test run or you use.
Hynix preference series based on the idea that you're already a Python programmer you don't have to learn talks is any language and an example he gives here is some of the dependency handling magic that talks does under the covers config files he's used in the past don't always work with the newest version and then theory this shouldn't happen with knocks because during control it's you know it's your program so as long as you have an broken you know a Python version you should be good digging into this sort of at the heart of it is a difference in structural philosophy so talks uses a subclassing model for sharing where you override attributes whereas knocks uses a function based approach so if you're trying to reuse a setup say between your 37 and 38 environment in talks you need to use special attributes and he's part of what he talks about is the fact that this can get confusing and the the names of the attributes are a little messy and all the rest of it whereas because in knocks it's just code 
you create some variables and you can pass those variables around and reuse them as you would do code reuse he just finds it much more intuitive there's a few more pieces of information in here that goes into the details and knocks is kind of always been on my to-do list to check out so this article kind of just reinforced that for me yeah aforementioned on the show a thea flowers uh very involved in knocks and creating it and I hadn't really done a deep dive into both of them but this is a 
great way to kind of compare and contrast and see what's going on in them and I think if your head space is in Python all day long that's like an easy to parse kind of thing you can see what's happening very quickly yeah versus like again learning 
another tumble like or whatever you know or yamble like eye and eye file like I can agree with that that it's like okay it looks like again white space really matters here and you know making sure that you've got that you might end up having to again create like these kind of templates whereas um something that's much more parsable and checkable because it's Python and you're familiar with like kind of how to do that I think is could be really useful I you know I'm a big fan of decorators now and so again I can kind of tell how that's being used and kind of what's happening with it so the nice comparison yeah I use talks a lot but I have fairly simple setups uh a lot of the things that he talks about in the article I sort of like oh okay I never tried to do that I wouldn't I wouldn't even know how to and and and so because I always started like I have fairly simple needs I'm not you know I'm not building 100,000 line multi whatever it's just hey go run the tests for this environment I'm not sure how much difference knocks would make for me but like you know he's got an example in here where you know he's running the coverage tests only on certain versions like the oldest version of the newest version or something along those lines yeah and if you're trying to do trickier stuff like that it's next one possible in talks and this is really just oh I will decorate that line with this and put in a little lift statement and you're done so so I think I think it knocks as advantage probably comes about if you start trying to do more challenging more interesting things in your test weeks yeah and so I mean the examples also like like you're saying like the different environments might be the versions of Python or potentially like other depending what else is installed potentially in that environment yeah and like I know one of the things that I do with talks you end up creating like so if I'm if I'm testing one of my Django libraries I need to test that in multiple versions of Django and in multiple versions of Python so you've got this sort of matrix thing that's happening on going on and talks takes care of that there's ways of setting all that up but it starts to feel you're stepping up to hey this 
is black magic you set this variable and it does it for you and if something goes wrong I'm like yeah I don't know what it's doing so whereas if it's code it starts to become like I can debug this I know how to read Python whereas the any file means going back to the documentation so it's an interesting approach yeah you could run a debugger on it potentially exactly exactly with nothing to install and nothing to configure anaconda notebooks is a lightweight ready to code and fully loaded data science environment entirely in your browser for free spin up new projects with a click of a button with all the packages and files you need in one place with fast and persistent cloud storage no matter what wherever you go your code goes no matter your experience level learn through hands-on experimentation and you'll be predicting the future with machine learning models in no time start coding with anaconda entirely in the cloud on anaconda dot cloud my next topic is about a new pep pep 704 if you're not familiar with peps and we talk about a moth on the show but if they're Python enhancement proposals and so this is a proposed change or addition to python it's titled require virtual environments by default for package installers and having listened to us in the past you know that we are fans of virtual environments in fact that's one of the primary ways that the last thing we were you're just talking about is operating is creating all these environments to do testing in and we had a deep dive in talking about virtual environment workflows in episode 141 talking about Brett cannons surveying of that sort of stuff and how people kind of use them and the different types that are out there it's interesting because he's a sponsor on this the author of the pep is pradian kedom we had talked about an article from him in our last episode so some repeat people here it was written or generated on January 16th and so it's kind of been out there accepting people's thoughts I'll include a link to the discussions on python dot org for pep 704 and also include some other links to this if again you're not using virtual environments you're a little kind of confused about them we have a really good article on real python about it but also I'll include the python packaging user guide about what they say to do the motivation well let me start with the abstract the the pep is recommending that package installers like pep require a virtual environment by default on 
python 3.13 you might say oh that's way in the future it's like based upon what you had said earlier they're already on alpha 5 with 312 so it's really not that far out there it's something that we would want to think about pretty early on because 
it's kind of a big change and what I feel like would happen is if someone who's going to use pep is on their system say an older Mac that has python python 2 is a system thing and they just type python and pep install it could potentially install directly into the system python and we've kind of went into deep discussions on this in the past and in this case it would halt and say actually you probably don't want to do that and then provide some guidance as to how to create a virtual environment at that point so that you're not potentially polluting your existing python installation or your system installation and that you want it to be going into there so there's some system sort of stuff that would have to be written in the pep in order to kind of check for this the motivation is for new users like I said things will seemingly work correctly when you don't have a virtual environment and they're not being used until that they don't and it also kind of creates this scope of mistakes since users need to remember to activate the virtual environment before running in a stall or like pep or configure those installs to air out so it's kind of like things like oops okay yeah you're right I need to activate my virtual environment as a reminder and so it kind of dives into that a little bit further I won't read every detail of it if you haven't looked at peps before this is a a good guide this is a fairly short one it covers potential issues with backwards compatibility in this case it's saying it would be incompatible with workflows where users are using installers outside of virtual environments that actually kind of brings up a big thing I'll mention here in kind of the commentary that's been happening in the conversation behind the scenes it doesn't have any security implications and then I think a very interesting section that they have in the pepsis is this thing called how to teach this the pep requires that new users create and use of virtual environment to get started using python packages this is however best practices is demonstrated in the case they have the link then to how to create virtual environments which is on the python packaging user guide there's a reference implementation how they want to do it and then a little section about how they would detect if an active virtual environment is there but it's been fairly hotly debated thing and so I kind of went into the discussion area and it's interesting and I would argue that just my cursory reviewing and looking through this thing is that it's kind of leaning negative I feel like a lot of people in the community feel like they already have these solutions and of course people that are on a python discussion board you know 
something like python.org obviously are more likely going to be long time python users and so they already have probably solutions for this and so they may not feel like it's needed and this is really a conversation geared toward total beginners or people that accidentally do this often and so that's kind of something I think that could be injected in the conversation some people don't really like the idea of how it would be enforced or it'd be enforced at all.
A common issue set that kind of came into the conversation later like probably over the last 10, 12 days is the issue with pip and kanda. kanda is another virtual environment slash installer for python packaging the unfriendliness if you will between pip and kanda is has been there a long time it's something that I dealt with back a long time ago and it was one of these things that had to be enforced in house rules like hey we're using kanda please don't add additional things to your setup using pip because we won't be able to kind of control that and kind of goes back and forth and so it ends up being a bit of a bummer like kind of situation of like how can you get those things to cooperate and what happens in that situation since it sounds like pp704 is geared around pip itself and not kanda specifically so that's something that I think they might have to think about and being dealt with of course if you're installing directly from kanda you would probably not see that message then so I don't know it's something that is interesting part of the conversation what do you think of this I like the idea yeah I've you know I've blown off some toes myself by accidentally forgetting to activate my virtual environment every once in a while so I like the idea I do understand though that anytime you've got a breaking change that it's going to make people uncomfortable I don't know how often this kind of thing gets scripted but if it if it did that's the problem as soon as you upgrade now you've got to go and edit all your scripts to add a command line value or an environment variable or however they get around it to say yes no I really mean to do this and that's there in the pet right they're not saying you can't pip install it's just saying you 
know the default is are you sure you really want to do that and in fact that might even be one solution right it's like a prompt me and say hey hey I haven't detected a virtual environment I art continue right you know that that might be one way of handling it right but even then you're back to needing dash yes or whatever if first scripted versions you know to me the the I don't want to just completely reopen that can't at worms we we went out in the in the previous episode but to me the condo stuff is is a red herring like that has so many other things it's an it's an own environment and and everybody brings condo up as in well what about condo and like well like condo exists nobody's saying condo is doing what and so like and and I think you know how you end up in some of those kinds of conversations are as this peps says in stollers and so everyone's to go to well how do we make condo do it and maybe the answer is no not in stollers maybe it's just you know what tips gonna 
behave this way which comes with python installed and which comes with python right so start there and then go hey we recommend the other installers also behave this way and leave it there right so yeah I don't know it's uh anytime you talk packaging or virtual environments or whatever there's there's some there's some depth there right and there's features and things that I don't use and so I can't really pretend to say oh well it definitely has to be done this way I understand that there's an old punch out edge cases that yep that I'm basically ignorant of right so on the surface I like the idea but you know I wouldn't surprise me if it doesn't happen and I would understand yeah I think it is a good conversation to have and we we talk about this within real python often you know like how can we get people comfortable with starting with python and so forth and best practices and it kind of is steering people in that direction and so I think that part of it is good I'm glad that again peps are not and all be all kinds of things you know they can be accepted or not accepted or they can remain as a conversation point for quite a while as ideas again the proposals so I found that interesting the last couple peps we've talked about I'm like wait a second this is like four weeks old and it's improved in this spot that's not what I'm used to I'm used to like hey this has been in draft for years so yeah yeah since the paths that they can travel yeah yeah so what's your next article this is a real python article from leodonis spulso romos and it's called the python standard repal triote code and ideas quickly and as a bit of a segue from what we were talking about this is more more aimed at folks who are new to python simply it's as an introduction to the repal yeah you know it's uh I live in the repal I'm in there mucking around all the time uh some of that might be because I don't use uh new your standard IDE I'm a VI guy will get back that minute yeah but uh so I so I find when I'm teaching I often go to it I'm like here you can play with it you can try this out and and I frequently students who have done like their own self-taught thing haven't come across it and and they're locked in their IDE so I love you know I love the fact that this article exists it's like hey you've got this you know the beauty of an interpreted language is you can have this little interactive playground so go play yeah like most of leodonis's articles this is pretty comprehensive if you're just getting started to python it teaches you why you might want to use the repal and how to get into it including some of the command line options we talked a couple episodes back one that was uh relatively recent discovery for me which is the dash i which allows you to run a script and then dumps you into the repal after it's executed which is great for seeing the state and helping you debug so he talks about that in a couple of other command line pieces then he goes on to talk about how to do multi-line coat segments uh and things like line continuation and how air handling is done so essentially you know the the basics of how to use these kinds of environments he then starts talking about the special variable underscore this is one of those things that I always forget is there I come across it I'm like hey I knew that and I'd never remember that it's in here this is a variable uh a special variable in the repal that gets the value of the last statement executed say I'm testing a a jango query and I forget to store the result in a variable I just type the query out and then I'm like oh crap I gotta do that again and put it in a variable well the last value got put in underscore you can just go variable equals underscore so it's uh a nice little shortcut one of the challenges you run into with the built-in repal is that importing is done once so if you import some code from a file and then change the file re-importing doesn't work there is a work around though and this isn't so much a repal feature as a Python feature but it's a good one to know if you're using the repal a lot the import lib library has a function called reload and it takes a reference to a module which then reloads it which is a handy little thing to remember then the next couple sections in the article talk about how you write and edit and re-execute chunks of code and some info on how to get help and inspect the code you've written uh this includes things like the keyboard shortcuts most of which map to the e-max standard if you're old enough to know what an e-max is uh for the record it's a full operating system that has the side effect of including an editor uh sorry like I mentioned a bvi guy 
and just had to get the jab in old gross battles or the bass of the wind anyways if you're uh if so if you're not new to the repal the next couple of sections might still have stuff that are useful to you the repals actually configurable and it has more depth than I realized there are you can set up an uh an environment variable called Python startup and point that to a file and it will load and execute that script when the repal starts and a couple examples he used of doing this was that reload function that I just talk about but you know if you're using it a lot or something like pretty print that you're using a lot you can stick this in this startup file and then it'll get run every time you run the repal so uh this was no more important.
Exactly you don't have to keep type an arm over over and again so that was a handy little thing I hadn't come across before and then the other thing yeah near the end he talks about is uh you can actually integrate it with rich so uh as you you were talking about before uh rich is this command line text formatting kind of thing and you can pull it into your repal and it make your errors and tracebacks colorized and again if you want to do that all the time you could stick that inside of your startup.
Finally the article finishes off with a description of what's missing and what to do about it.
Mr Bailey here mentioned the B Python repal alternative in episode 141 this article talks about it and others you're giving you a quick overview of their features um so if you're new to the repal this is a great introduction and if like me it's kind of old hat there's still some value in a quick skim there's a few little gems in here that you might not be familiar with that could 
make your repal experience better.
Yeah there's some really good stuff in there I'm he always is deep on the research so yeah I'm excited to to dig a little bit deeper into it because I was like oh yeah I know this and it's like well wait hold on go look through um not the the side of the right table of contents but the expanded table of contents at the top of the article and you could see some things that you uh maybe are as familiar with or could be air as free to research.
Yeah I find with you know there's always value in some of these kinds of long articles because like I said with the you know the underscore there's things that you you know but if you don't use often you forget right and uh I just came back from vacation recently and I've got a nice camera and but I don't use it often enough to always remember how to use it and I'm always like I know I know I know I know it does this but I don't remember how to do it.
Yeah and so I find everyone's to while I'm you know back into the manual going how do I do this and where is that button and which one is this and this kind of article sort of the same thing right like if even if you if you know it if you're not using it frequently the little items of uh wait oh yeah that's right I can do this and it'll make my life easier that that there's value in that.
Yeah totally.
This week I want to shine a spotlight on another real Python video course.
If you worked in the language like Java or C++ then you're probably used to writing getter and set our methods for every attribute in your classes.
These methods allow you to access and mutate private attributes while maintaining encapsulation.
In Python things are different and this course covers the details it's titled getters and setters and python.
It's based on a real python tutorial by previous guest Leodonis Bozool Ramles and in the course Darren Jones takes you through how to write getter and set our methods in your classes replace getter and set our methods with properties.
Explore other tools to replace getter and set our methods within python and decide when setter and getter methods can be the right tool for the job.
To get the most out of this course you should have the fundamentals of object oriented programming in python under your belt and we've got you covered there with OOP courses and a learning path ready to go.
Real python video courses are broken into easily consumable sections and where needed include code examples for the 
technique shown all lessons have a transcript including closed captions.
Check out the video course you can find a link in the show notes or you can find it using the enhanced search tool on real python.com So that gets us into our discussion this 
week so this is based on a slightly older article but it's seen kind of came up I'm guessing in some discussion areas and that's how you kind of found it this week and included in pycoters.
It's titled 20 things I've learned in my 20 years as a software engineer it's by Justin ethyridge and it's on a site for a company called simple thread and there's a team of developers and they have a really nice blog very pretty site actually can be read through their blog you can see that they have lots of deep thoughts about different things UX design engineering DevOps and so forth and so this one really is kind of focusing on a lot of core concepts and opinions but basically things that he feels like he's learned over the years and I don't have as long as a software engineer we've mentioned that multiple times on here but number one I definitely agree with and I see that in my favorite engineers that are out there but it's basically I still don't know very much and that's the trick software is that or even technology is that it's constantly changing and growing and going in different directions or you look at one particular language something like JavaScript as an example and it's just constantly evolving and all the different sort of front end frameworks and different things that are out there and not to be like upset that you don't know at all you know because there's hardly any way to know everything that's out there and you're going to just need to specialize in what you can learn but most importantly be open you know be a lifelong learner and that's why I took this job you know like why I got the real Python gig in first place because I was learning Python and wanted to learn more and one of my favorite ways to learn is to teach as being a teacher you end up having to really learn the thing thoroughly to be able to explain it in any ways to other people and it's why I decided to do the podcast I really wanted to meet other people and ask them questions and make sure that I'm you know do I got the concept correctly and if I repeat it back to them or they saying exactly back to me to say that I'm getting the ideas and making sense of it and then I can share that with other people so that's been a fun part of it.
Well yeah and it's and it's not just a software specific thing either right like yeah it's you know I used to spend a lot of time with folks with PhDs and you know from a distance it's like oh wow they have that and what are they whatever and and what they've done is they've just become the world's foremost expert on this tiny little slice of something right yeah very about so and and and that's not a negative thing it means they're an expert in that but there's just so much information in the world you know you're never going to read every book and even if you did you're not gonna remember every one of them yeah so I think there's there's a there's a humbleness that kind of needs to go with that to always wanting to learn sort of thing yeah I think that's a big part of the questioning he has another one and there will probably hit it but just the idea of like not being afraid to ask questions you know it's like if that's fine and that to me yes is way more impressive is that the person is willing to ask the questions the group of people that just sit there and stare at you and you're like I know they have questions I can see it in their eyes so yeah well and one of the things I really like how we started this blog as well which is he says you're about to read a blog post with a lot of advice without understanding context advice is meaningless yeah so he's even starting from this humble place of hey here are my thoughts they may or may not apply to you you know and and he he spends a little time talking about his context being smaller teams this shipping focus productivity sort of focus versus say you know more of esoteric language focus or tool whatever right like and that shifts how you interact and how you think about these things right and and of course it changes the advice you would give you know it's my my university I did co-op which it's some places as known as internships and I think one of the strongest things I got out of that program was working at different kinds of companies so that I could see when I got to the real world like oh yeah that style isn't me that style is right and getting that context and fitting in how that helps us out things massively you know like to get an idea of it yes I had quite the shock having been a musician and a person just taking all these different jobs and really coming from the service industry and retail and all these other kinds of things are interacting with the customer directly at all times it was very very different when I was switched into you know like banking or a law firm or these other kinds of places or even larger sort of corporate structures and I was like this is this normal like how this is functioning 
and how we approach problems and in the answer to that question is no no it's not it's just how everybody does it yeah different species so weird yeah so I bet that would have been really helpful to see where they different size organizations that 
you looked at too yeah yeah I worked I spent some time at time little places and I spent some time in some very large places so it kind of helped out that my understanding of my preference for smaller places but yeah anyhow so you know there's a couple things in here that you hear older engineers talk about all the time you know the the best code is you know don't don't reinvent the wheel you know personally I'm like my most productive days are the ones where I'm removing code which reminds 
me of you know I don't see it as much now but for for a long time the answer was well how productive are they count how many lines of code they wrote okay so I removed 200 today is that mean I'm negatively productive for you know right yeah like did we just go through that with with our friend space Karen yes yeah yeah and then the one of the other ones I kind of liked in here was every system eventually sucks get over it so on one of our internal chat channels recently and real python I've 
been sharing I have discovered dialing bitty and he's a programmer who does musical paritists on YouTube uh musical parities on YouTube and he has a song called the big rewrite and it's based on american pie the song not the movie and this kind of 
made me think of that right like eventually you'll get to a place where you the you end up with bit rock right like it may be perfect now but over time as multiple people touch it as the needs change you know it's going to get worse and the better 
you are at sort of internalizing that and knowing when to muck around and when not to muck around I make some big difference in your productivity yeah cool I like some of these other ones that I hear this often from other developers who are talking to people that are still learning the basics or maybe they've already gotten into the intermediate realm he calls it sometimes you have to stop sharpening this saw and just start cutting and I agree like yes that's a true thing that I've seen people do as far as like getting a project started they just spent so many times repairing everything possible and never got to building anything on their own and that happens in sort of tutorial hell that people kind of end up being in it's like well 
try it out you know like I like to try to steer people more into that realm and I have the biggest problem myself of like get started to get started and so I'm actually been getting much much deeper into circuit python and I have a whole bunch of projects that are ready to go for me to dive in really deeply now and so I'm excited to stop you know sort of shopping this saw so now I he also talks about you know the the 10x developer and how it's a myth and and I fully agree with them on this right I don't really believe in 10x coders what I do he calls it something different but I do believe in negative productivity those he and he reversed so this is the point one x developer there are people that suck value out of a team and I don't mean people learning because you need to give folks time to do that and and different people journey differently but there are folks that just end up causing more problems than they're solving on the team and so like Justin I'm not in search of a 10x but I definitely want to try to figure out in my hiring how to how to avoid those negative folks and that ties to something else he said which I really agree with which is interviews are almost worthless for telling you how good of a team members someone will be you know smart and knowledgeable is not a good indicator obviously want people who are smart and knowledgeable but the the anti patterns you know unreliability, abysiveness, pompousness none of that shows up in an interview right and yeah I get a real sense from from his comments that he's very keen on teams that know how to work well together and there's a huge productivity difference when that when that jelling happens with a small team and again I think that's back to that sort of small versus the large organization you know if you've only got five or 10 folks one or two negative contributors makes a huge difference when you've got a hundred thousand you know it's a it's a bump in the road and it's nothing yeah he 
actually went much deeper because that that was like the common refrain in the comments at the bottom of this article he wrote a separate hold like article on it and what it kind of had to explain what he meant by it and he describes all these different types which I thought was really a good read too so I'm included a link for that but he at the comment section of that a person added this really kind of interesting idea how having a person on your team that isn't necessarily like a 10 times programmer but is able to help the other programmers when the organization and get their code ready and he likened it to I don't know if you've played video games where it's like a big multi-party kind of thing something like you know destiny or world of workcraft or whatever and there's this term they have for it called a carry and so it's a person that can help new people that are to you know joining this big event this raid or whatever they've done it before and they're willing to sort of shurper or guide or carry individuals who are not familiar with this sort of experience through that that experience and their polite and kind and like helpful and willing to deal with the newness of this person and the dumb questions that they have and explaining you know the process over and over and some people just love that and if you can find a developer who likes to do that sort of thing to carry other people and help them there's such a asset to your team you know like the idea of 
just literally building within I know there's going to be individuals who want to close themselves off and not necessarily help others and those are the ones that you know very often can be like you said the they could have forces on your team yeah I would take somebody who's got strong mentoring skills and solid coding skills over your so-called superstars every day of the week I've part of it I think is you know that this is always just an an experience thing yeah but the vast majority of 
people that I've bumped into who consider themselves superstars were also extremely difficult to work with you know when I've been managing teams and I think of the overall productivity of the organization I would much rather a group of so-called be players who get along and or our study and and and work together then then trying to herd the cats of you know that the the programmer you see in movies right that stays up all night to just all the problem and then at four o'clock in the morning when they fall asleep on their keyboard the one is getting paged because they didn't notice that they were too tired to keep working yeah or you know potentially they get frustrated and they leave and then it's like the so- like paleontology like 
research of like what did they create here yeah that's an interesting stuff I like the idea of software engineers should write regularly the idea that having a blog or journal or writing documentation it makes you think about what you're creating you know separately and it's you know a skill to kind of sort of sharpen that communication skill I think that's kind of interesting yeah I think that goes with the mentorship part two right because you know that those are those are soft skills that we don't think of as a programmer must know the language you know might must be analytical yes they must but it's also good for the team yeah if they've got some of those soft skills like communication yeah that's a really good guide for lots of things to look at definitely good discussion points that I think could be brought up with a team and to think about so all right well that gets us into projects maybe I'll go first sure so mine is called mito it's spelled MITO and it's subtitle is a spreadsheet inside your Jupiter lab notebooks it is kind of an interesting tool like I was very excited by playing around with this for people that are doing that transition that are interested in like my wife she is like an Excel queen she knows 
everything in Excel and can do everything inside of it it's kind of amazing and she often asks me well what is Python I'm like well you know I got 144 episodes to show you you can listen to but in the end it's something where if somebody can be working with the tool that they're familiar with we're kind of know what these guide posts are that they want to try to accomplish and maybe are used to a graphical user interface kind of leading them into that this could do that for somebody who wants to get in a data science wants to move from Excel and maybe get to the level of like automation and other tools without having to learn some of the more cryptic Microsoft tools and languages that they develop for doing it and do it and something 
maybe it's slightly more readable like Python so you start this by just you wouldn't even stall it and pip install it you can get going inside of your virtual environment and the minute you launch that first line it opens up graphical user interface with like very familiar looking drop-down menus and so forth and you say all right file and I want to go ahead and import this file and maybe it's a CSV file and instantly it's a data frame with at the top of it again very graphical kind of stuff where you can just click on like filter icons and then it will open a sidebar that gives you all the options for how you want to filter it and change it and meanwhile it's filling in cells of the Jupiter notebook below it with all the Python code 
that's needed to do this so you want to create a pivot table okay well what do you want to pivot verb this versus that again you're clicking on drop-down menus to select those things and meanwhile it's writing the code for you as you create it it's really slick includes links to things like matte plot liber plotly importing tools and pandas and all that stuff is kind of in there I just think it might be a nice kind of in-between tool for teaching people and get in the you know kind of excited about doing Python and maybe helping you understand a little bit how to structure your code to do that a couple things that I didn't like about it it has kind of a weird marketing bent to it as you open up the first thing it is asking you for your email address which I thought was well that's a little strange it doesn't require you to write on account but it is asking if you're email address and I get it you know open source needs to be funded and needs to have a way to keep going if that 
is completely like jarring to you then maybe this might be something to skip but that part of it was a little strange other than that I think it could be a really useful tool for people getting started I have given my email address to so many different marketing things that's been my new hobby we can's just to like unsubscribe to as many things as I can as they kind of come up but I think might it might be a nice in-between tool for people interested in maybe moving from Excel and knowing how to do some of the things inside there and how to in some ways it's even easier than Excel I think from the way I was looking at the way the gooey is laid out in it so to check out what's your project my project this week is called Curse to Four it's by Tashara Sadwani I think I'm developing a theme with the projects that attract me so similar to the infinite AI array project I described in episode 141 this one started as a random post on Twitter sort of a bet you can't do it so Python is a C family of languages and but one of the things that it distinguishes it from its ancestor is the lack of a C style for loop if you haven't done C before the four loop mechanism there based on like a counter rather than say a four in kind of statement like we have in Python the the four the C foment like we have in Python the the four the C four statement has three parts an initializer a comparator and an incrementer and these parts are separated by semicolons so if I was going to loop 10 times I would say four I equals zero semicolon I lsay you know it starts a very it declares initialess than 10 semicolon I plus plus and that would say you know it starts a very it declares initializes a variable I it checks whether or not that I is less than 10 and then at the end of the loop it increments it so Python's four loop is more like hallenge that to char rows to was trying to imple
what is often called four in in other languages and that's based on an iterator mechanism so the challenge that to char rows to was trying to implement a C like loop in Python and since I'm talking about it you might guess that he succeeded the worU R CD-FOR if you want to play with this his apprd succeeded in in quotes you can install cursed for or I prefer to pronounce it cursed it makes seems more appropriate but it's just cursed E as C U R CD-FOR if you want to play with this his approach is rather clever he used a context manager in osay I is less than 10 Python's going to evaluate rder to take advantage of the blocks and text because everything in the block is what gets looped.
The second challenge is getting the variables and comparisons to work properly so in Python if I say I is less than 10 Python's going to evaluate tha the walrus operator so instead of saying I equalt and of course in C it's trying to evaluate that each time it goes through the loop so there's no equivalent so what he does is he creates a custom class called var which you use in the assignment portion of the loop and then takes advantage of thhan 10 Python tries to evaluate that but because e walrus operator so instead of saying I equal zero like you would in C you say I call an equals var and then pass in the zero to var so that's pretty close to what the C style looks like and the reason he does this is it solves the comparison and lly controlling the loop and then he does a simil
increment portions so if I just do X is less than 10 Python tries to evaluate that but because I'm doing it on the var object what ends up happening is the the Dunder comparison method just get triggered and since this is a var object I less than 1this is a Python parsing module built into Python0 invokes Dunder less than and then he overloads that to change the state of the class essentially controlling the loop and then he does a similar thing with Dunder add to solve the increment problem and then the final bit which was kind of tricky ead which was inspired by an equally evil library
is he want the actual context manager block to be looped over he does this by getting really funky with the AST module this is a parsing module this is a Python parsing module built into Python he uses the AST node transformer class to basically fithis out some of his dead ends that he attempted nd instances of the cursive for and then muck with their blocks so that you can do the looping after that he actually talks about an alternative implementation using a custom code that can instead which was inspired by an equally evil library one the conquered the problem and the things that sorthat added brace brackets to Python so the projects kind of just a neat little idea and something to play with the art of article on the other hand is beautiful more interested in the project itself he goes through in detail how he worked all this oave to interact with I don't want to see this yetut some of his dead ends that he attempted things that were to things that didn't work so it's a master class in doing some very questionable things but you learn a whole bunch about some of the more esoteric corners of Python while doing it and hol methods like all this sort of stuff that is undw he approached it and how he you know how he conquered the problem and the things that sort of stopped him and what he had to try to step back and try again so I had fun reading this and it's really obvious from the article that he had a lot of futhe wall on a variety of different things this isn building it I just hope it doesn't end up as a dependency in any of the libraries that I have to interact with I don't want to see this yet this is funny beautiful and brilliant just just don't use it yeah no I we've talked about context managerse about say how an AST is done or if you're tryin several times over the last couple of episodes we've talked about abstract syntax trees and so you're getting to see that and per the special methods like all this sort of stuff that is underlying a lot of you know fundamental Python and the dismo basically it's using it and doing very little eldule to disassemble and kind of look at what's happening there so it's using all that stuff so if you wanted to see someone kind of going through you know how and hitting their head against the wall on a variety of different things this is a reallyow to apply it to your own project that that styl neat right up of it and yeah it's fascinating I again I wouldn't want to use it but but I get you know the process in there and one of the reasons I love projects like this is their self-contained so if you're trying to learn a little more about shat yeah and honestly I think Python probably shoay how an AST is done or if you're trying to learn more about writing context managers or whatever yeah you know if you go reading article you sort of get oh that's the example but you know if you're trying to find a project that uses it where's th go yeah all right well cool well thanks for brinat this is a small enough project and it basically it's using it and doing very little else right so it's nice and self-contained so even if it's even if the purpose is a little weird you know it's in a digestible trunk and you can go off and read nda notebooks start coding with anaconda entirely
some Python and try and understand how how some of this stuff works and then figure out how to apply it to your own project that that style is how JavaScript does it to right yeah I'll honestly it the Python is the the the duck is the black sheep hou see a subscribe button somewhere remember thatere most languages in the C family have something like this and this is why in most languages there is a four in or something similar to that yeah and honestly I think Python probably should have just called the four loop something like that so thaus a question or a topic idea I've been your hostt people who were new to the language didn't go away the second because it changes your expectations yeah but you know yeah here's my advice to Guido that's 30 years too late so there you go yeah all right well cool well thanks for bringing all these articles and topics and discussion points uh this has been fun see you again in a couple weeks and talk to you soon and don't forget you can code in a fully loaded data science environment entirely in your browser for free with anaconda notebooks start coding with anaconda entirely in the cloud on anaconda dot cloud I want to thank Christopher Tudo for coming on the show again this week and I want to thank you for listening to the real python podcast make sure that you click that follow button in your podcast player and if you see a subscribe button somewhere remember that the real python podcast is free if you like the show please leave us a review you could find show notes with links to all the topics we spoke about inside your podcast player or at realpython.com slash podcast and while you're there you can leave us a question or a topic idea I've been your host Christopher Bailey and look forward to talking to you soon

real    10m19.550s
user    0m0.000s
sys     0m0.015s